// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.20.2
// source: libuser.proto

package grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type LibAuthRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
}

func (x *LibAuthRequest) Reset() {
	*x = LibAuthRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_libuser_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LibAuthRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LibAuthRequest) ProtoMessage() {}

func (x *LibAuthRequest) ProtoReflect() protoreflect.Message {
	mi := &file_libuser_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LibAuthRequest.ProtoReflect.Descriptor instead.
func (*LibAuthRequest) Descriptor() ([]byte, []int) {
	return file_libuser_proto_rawDescGZIP(), []int{0}
}

func (x *LibAuthRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

type LibAuthResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     int32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name   string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Status int32  `protobuf:"varint,3,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *LibAuthResponse) Reset() {
	*x = LibAuthResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_libuser_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LibAuthResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LibAuthResponse) ProtoMessage() {}

func (x *LibAuthResponse) ProtoReflect() protoreflect.Message {
	mi := &file_libuser_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LibAuthResponse.ProtoReflect.Descriptor instead.
func (*LibAuthResponse) Descriptor() ([]byte, []int) {
	return file_libuser_proto_rawDescGZIP(), []int{1}
}

func (x *LibAuthResponse) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *LibAuthResponse) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *LibAuthResponse) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

var File_libuser_proto protoreflect.FileDescriptor

var file_libuser_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x6c, 0x69, 0x62, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x04, 0x67, 0x72, 0x70, 0x63, 0x22, 0x26, 0x0a, 0x0e, 0x4c, 0x69, 0x62, 0x41, 0x75, 0x74, 0x68,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x4d, 0x0a,
	0x0f, 0x4c, 0x69, 0x62, 0x41, 0x75, 0x74, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x32, 0x4a, 0x0a, 0x0e,
	0x4c, 0x69, 0x62, 0x54, 0x65, 0x73, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x38,
	0x0a, 0x07, 0x4c, 0x69, 0x62, 0x41, 0x75, 0x74, 0x68, 0x12, 0x14, 0x2e, 0x67, 0x72, 0x70, 0x63,
	0x2e, 0x4c, 0x69, 0x62, 0x41, 0x75, 0x74, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x15, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x4c, 0x69, 0x62, 0x41, 0x75, 0x74, 0x68, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x09, 0x5a, 0x07, 0x2e, 0x2f, 0x3b, 0x67,
	0x72, 0x70, 0x63, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_libuser_proto_rawDescOnce sync.Once
	file_libuser_proto_rawDescData = file_libuser_proto_rawDesc
)

func file_libuser_proto_rawDescGZIP() []byte {
	file_libuser_proto_rawDescOnce.Do(func() {
		file_libuser_proto_rawDescData = protoimpl.X.CompressGZIP(file_libuser_proto_rawDescData)
	})
	return file_libuser_proto_rawDescData
}

var file_libuser_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_libuser_proto_goTypes = []interface{}{
	(*LibAuthRequest)(nil),  // 0: grpc.LibAuthRequest
	(*LibAuthResponse)(nil), // 1: grpc.LibAuthResponse
}
var file_libuser_proto_depIdxs = []int32{
	0, // 0: grpc.LibTestService.LibAuth:input_type -> grpc.LibAuthRequest
	1, // 1: grpc.LibTestService.LibAuth:output_type -> grpc.LibAuthResponse
	1, // [1:2] is the sub-list for method output_type
	0, // [0:1] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_libuser_proto_init() }
func file_libuser_proto_init() {
	if File_libuser_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_libuser_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LibAuthRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_libuser_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LibAuthResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_libuser_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_libuser_proto_goTypes,
		DependencyIndexes: file_libuser_proto_depIdxs,
		MessageInfos:      file_libuser_proto_msgTypes,
	}.Build()
	File_libuser_proto = out.File
	file_libuser_proto_rawDesc = nil
	file_libuser_proto_goTypes = nil
	file_libuser_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// LibTestServiceClient is the client API for LibTestService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type LibTestServiceClient interface {
	LibAuth(ctx context.Context, in *LibAuthRequest, opts ...grpc.CallOption) (*LibAuthResponse, error)
}

type libTestServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLibTestServiceClient(cc grpc.ClientConnInterface) LibTestServiceClient {
	return &libTestServiceClient{cc}
}

func (c *libTestServiceClient) LibAuth(ctx context.Context, in *LibAuthRequest, opts ...grpc.CallOption) (*LibAuthResponse, error) {
	out := new(LibAuthResponse)
	err := c.cc.Invoke(ctx, "/grpc.LibTestService/LibAuth", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LibTestServiceServer is the server API for LibTestService service.
type LibTestServiceServer interface {
	LibAuth(context.Context, *LibAuthRequest) (*LibAuthResponse, error)
}

// UnimplementedLibTestServiceServer can be embedded to have forward compatible implementations.
type UnimplementedLibTestServiceServer struct {
}

func (*UnimplementedLibTestServiceServer) LibAuth(context.Context, *LibAuthRequest) (*LibAuthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LibAuth not implemented")
}

func RegisterLibTestServiceServer(s *grpc.Server, srv LibTestServiceServer) {
	s.RegisterService(&_LibTestService_serviceDesc, srv)
}

func _LibTestService_LibAuth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LibAuthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibTestServiceServer).LibAuth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.LibTestService/LibAuth",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibTestServiceServer).LibAuth(ctx, req.(*LibAuthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _LibTestService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "grpc.LibTestService",
	HandlerType: (*LibTestServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "LibAuth",
			Handler:    _LibTestService_LibAuth_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "libuser.proto",
}
